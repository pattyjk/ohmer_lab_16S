facet_wrap(~Carbon_source)
bd_data<-read.delim('Documents/GitHub/CarbonTemperatureInhibition/bd_data', header = T)
#plot OD vs inhibition
ggplot(bd_data, aes(OD600, Per_inhib, color=Strain))+
geom_point()+
stat_cor(method='pearson')+
facet_wrap(~Carbon_source)
#read in Bd data
bd_data<-read.delim('Documents/GitHub/CarbonTemperatureInhibition/bd_data', header = T)
#plot OD vs inhibition
ggplot(bd_data, aes(OD600, Per_inhib, color=Strain))+
geom_point()+
stat_cor(method='pearson')+
facet_wrap(~Carbon_source)
bd_data<-read.delim('Documents/GitHub/CarbonTemperatureInhibition/bd_data', header = T)
#plot OD vs inhibition
ggplot(bd_data, aes(OD600, Per_inhib, color=Strain))+
geom_point()+
stat_cor(method='pearson')+
facet_wrap(~Carbon_source)
ggplot(bd_data, aes(Per_inhib, fill=Strain))+
geom_histogram()+
facet_wrap(~Carbon_source)
library(ggplot2)
library(ggpubr)
#read in Bd data
bd_data<-read.delim('Documents/GitHub/CarbonTemperatureInhibition/bd_data', header = T)
#plot OD vs inhibition
ggplot(bd_data, aes(OD600, Per_inhib, color=Strain))+
geom_point()+
stat_cor(method='pearson')+
facet_wrap(~Carbon_source)
#split data by Bd strain
bd_split<-split(bd_data, f = bd_data$BdStrain)
#plot OD vs inhibition faceted by carbon source,
ggplot(bd_split$Jel423, aes(OD600, Per_inhib, color=Strain))+
geom_point()+
stat_cor(method='pearson')+
ggtitle('Jel 423')+
facet_wrap(~Carbon_source)
#plot all data together
ggplot(bd_data, aes(OD550, Per_inhib, color=Strain))+
geom_point()+
stat_cor(method='pearson')+
facet_wrap(~Carbon_source)
#plot OD600 vs inhibition faceted by carbon source,for Jel 197
ggplot(bd_split$Jel197, aes(OD550, Per_inhib, color=Strain))+
geom_point()+
ggtitle('Jel197')+
stat_cor(method='pearson')+
facet_wrap(~Carbon_source)
#plot all data together
ggplot(bd_data, aes(OD550, Per_inhib, color=Strain))+
geom_point()+
stat_cor(method='pearson')+
facet_wrap(~Carbon_source)
#plot OD600 vs OD550 to see how biofiilms compare to growth
ggplot(bd_data, aes(OD600, OD550))+
geom_point()+
theme_bw()+
facet_wrap(~Carbon_source)
#plot OD600 vs OD550 to see how biofiilms compare to growth
ggplot(bd_data, aes(OD600, OD550))+
geom_point()+
theme_bw()+
stat_cor(method='pearson')+
facet_wrap(~Carbon_source)
#plot OD600 vs OD550 to see how biofiilms compare to growth
ggplot(bd_data, aes(OD600, OD550, color=Strain))+
geom_point()+
theme_bw()+
stat_cor(method='pearson')+
facet_wrap(~Carbon_source)
#biofilms over temperature for each isolate
ggplot(bd_data, aes(Temp, OD550, color=Strain))+
geom_point()+
theme_bw()+
stat_cor(method='pearson')+
facet_wrap(~Carbon_source)
#OD600 over temperature for each isolate
ggplot(bd_data, aes(Temp, OD600, color=Strain))+
geom_point()+
theme_bw()+
geom_line()+
stat_cor(method='pearson')+
facet_wrap(~Carbon_source)
#plot OD600 vs OD550 to see how biofilms compare to growth
ggplot(bd_data, aes(OD600, OD550, color=Strain))+
geom_point()+
theme_bw()+
stat_cor(method='spearman')+
facet_wrap(~Carbon_source)
View_bd_data
View(bd_data)
str(bd_data)
plot(bd_data$Per_inhib, bd_data$OD600)
plot(bd_data$Per_inhib, bd_data$OD550)
plot(bd_data$Temp, bd_data$Per_inhib)
ggplot(bd_data, aes(Per_inhib, fill=Strain))+
geom_histogram()+
facet_wrap(~Carbon_source)
#plot OD600 vs OD550 to see how biofilms compare to growth
ggplot(bd_data, aes(OD600, OD550, color=Strain))+
geom_point()+
theme_bw()+
stat_cor(method='spearman')+
facet_wrap(~Carbon_source)
#plot all data together
ggplot(bd_data, aes(OD550, Per_inhib, color=Strain))+
geom_point()+
stat_cor(method='pearson')+
facet_wrap(~Carbon_source)
glm_od600<-glm(Temp ~ Per_inhib, data=bd_data)
glm_od600
summary(glm_od600)
bd_split<split(bd_data, f= bd_data$Strain)
bd_split<-split(bd_data, f= bd_data$Strain)
glm_od600<-glm(Temp ~ Per_inhib, data=bd_split$HP1C)
summary(glm_od600)
glm_temp_HP<-glm(Temp + OD550 + OD600 ~ Per_inhib, data=bd_split$HP1C)
summary(glm_temp_HP)
anova(glm_temp_HP)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.16")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.20")
library(dada2)
library(dada2)
setwd("Documents/GitHub/ohmer_lab_16S/")
list.files("./")
#get lsit of F/R reads
fnFs <- sort(list.files("./ohmer_demux/", pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files("./ohmer_demux/", pattern="_R2_001.fastq", full.names = TRUE))
fnFs
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
#look at quality of reads
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
#assign files names
filtFs <- file.path("./ohmer_demux/", "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path("./ohmer_demux/", "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
filtFs
?filterAndTrim
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
#filter samples
filtered_out <- filterAndTrim(forward_reads, filtered_forward_reads,
reverse_reads, filtered_reverse_reads, maxEE=c(2,2),
rm.phix=TRUE, minLen=175, truncLen=c(250,200))
#filter samples
filtered_out <- filterAndTrim(fnFs, filtFs,
fnRs, filtRs, maxEE=c(2,2),
rm.phix=TRUE, minLen=175, truncLen=c(250,200))
filtered_out <- filterAndTrim(forward_reads, filtered_forward_reads,
reverse_reads, filtered_reverse_reads, maxEE=c(2,2),
rm.phix=TRUE)
#filter samples
filtered_out <- filterAndTrim(fnFs, filtFs,
fnRs, filtRs,
rm.phix=TRUE, minLen=175)
filtered_out <- filterAndTrim(fnFs, filtFs,
fnRs, filtRs,
rm.phix=TRUE, minLen=120)
View(filtered_out)
#learn error rates on subset of data (use default)
errF <- learnErrors(filtFs, multithread=TRUE)
#100715374 total bases in 672839 reads from 73 samples will be used for learning the error rates.
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
#do the daading for each read
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)
#merge pairs
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
str(seqtab.nochim)
#make seq tab into R table
ohmer_lab_table<-as.data.frame(seqtab.nochim)
str(ohmer_lab_table)
names(ohmer_lab_table)
coSums(ohmer_lab_table)
colSums(ohmer_lab_table)
#write to file
write.table(ohmer_lab_table, 'asv_table.txt', quote=F, sep='\t')
#assign taxonomy
taxa <- assignTaxonomy(seqtab.nochim, "./silva_species_assignment_v138.1.fa.gz", multithread=TRUE)
#assign taxonomy
taxa <- assignTaxonomy(seqtab.nochim, "./silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE)
str(taxa)
taxa2<-as.data.frame(taxa)
View(taxa2)
writetable(taxa2, 'taxonomy.txt', quote=F, sep='\t')
write.table(taxa2, 'taxonomy.txt', quote=F, sep='\t')
library(vegan)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(reshape2)
library(RColorBrewer)
#read in mapping file
meta<-read.delim('ohmer_lab_map.txt', header = T)
View(meta)
set.seed(515)
row.names(ohmer_lab_table)
#get sequencing depth
plot(rowsum(ohmer_lab_table))
#get sequencing depth
plot(rowsums(ohmer_lab_table))
#get sequencing depth
plot(rowSums(ohmer_lab_table))
rowSums(ohmer_lab_table)
min(rowSums(ohmer_lab_table))
#get sequencing depth
hist(rowSums(ohmer_lab_table))
length(which(rowSums(ohmer_lab_table))<1000)
length(which(rowSums(ohmer_lab_table)<1000))
which(rowSums(ohmer_lab_table)<1000)
#remove samples with <1000 reads
ohmer_lab_table<-ohmer_lab_table[-which(rowSums(ohmer_lab_table)<1000),]
dim(ohmer_lab_table)
ohmer
#rarefy data to 1000 per sample
ohmer_rare<-rrarefy(t(asv_table), sample=1000)
#rarefy data to 1000 per sample
ohmer_rare<-rrarefy(ohmer_lab_table, sample=1000)
#calculate PCoA based on BC similarity
ohmer_pcoa<-capscale(ohmer_rare  ~ 1, distance='bray')
#pull out x/y coordinates
ohmer.scores<-scores(ohmer_pcoa)
#grab only sample coordinates, write to data frame
ohmer.coords<-as.data.frame(ohmer.scores$sites)
#create sample names as a column
ohmer.coords$SampleID<-row.names(ohmer.coords)
View(ohmer.coords)
#map back meta data
ohmer.coords<-merge(ohmer.coords, meta, by.x='SampleID', by.y='SampleID')
#calculate percent variation explained for first two axis
100*round(ohmer_pcoa$CA$eig[1]/sum(ohmer_pcoa$CA$eig), 3)
#20.4
100*round(ohmer_pcoa$CA$eig[2]/sum(ohmer_pcoa$CA$eig), 3)
#plot PCoA
ggplot(ko.coords, aes(MDS1, MDS2))+
geom_point()+
#geom_text()+
theme_bw()+
guides(alpha = "none")+
xlab("PC1- 20.4%")+
ylab("PC2- 12.2%")
#plot PCoA
ggplot(ohmer.coords, aes(MDS1, MDS2))+
geom_point()+
#geom_text()+
theme_bw()+
guides(alpha = "none")+
xlab("PC1- 20.4%")+
ylab("PC2- 12.2%")
#plot PCoA
ggplot(ohmer.coords, aes(MDS1, MDS2, color=Species))+
geom_point()+
#geom_text()+
theme_bw()+
guides(alpha = "none")+
xlab("PC1- 20.4%")+
ylab("PC2- 12.2%")
#calculate richness
ohmer.alph<-as.data.frame(specnumber(ohmer_rare))
ohmer.alph$SampleID<-row.names(ohmer.alph)
ohmer.alph<-merge(ohmer.alph, meta, by='SampleID')
ohmer.alph$Richness<-as.numeric(larv.alph$`specnumber(otu_rare)`)
ohmer.alpha2<-as.data.frame(vegan::diversity(ohmer_rare, index = 'shannon'))
names(larv.alpha2)<-"Shannon"
names(ohmer.alpha2)<-"Shannon"
ohmer.alph<-cbind(ohmer.alph, ohmer.alpha2)
#plot richness
ggplot(ohmer.alph, aes(Species, Shannon, fill=Type))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
xlab("")+
coord_flip()+
guides(fill="none")+
ylab("sOTU Richness")+
scale_fill_manual(values = c('#f58231', '#4363d8'))
#plot richness
ggplot(ohmer.alph, aes(Species, Shannon, fill=Type))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
xlab("")+
coord_flip()+
guides(fill="none")+
ylab("Shannojn Diversity")
ggplot(ohmer.alph, aes(Species, `specnumber(ohmer_rare)`, fill=Type))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
xlab("")+
coord_flip()+
guides(fill="none")+
ylab("Shannon Diversity")
ggplot(ohmer.alph, aes(Species, `specnumber(ohmer_rare)`, fill=Type))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
xlab("")+
coord_flip()+
ylab("Shannon Diversity")
#plot richness and shannon
ggplot(ohmer.alph, aes(Species, Shannon, fill=Type))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
xlab("")+
coord_flip()+
ylab("Shannon Diversity")
ggplot(ohmer.alph, aes(Species, `specnumber(ohmer_rare)`, fill=Type))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
xlab("")+
coord_flip()+
ylab("Shannon Diversity")
#plot PCoA
ggplot(ohmer.coords, aes(MDS1, MDS2, shape=Species, color=Type))+
geom_point()+
#geom_text()+
theme_bw()+
guides(alpha = "none")+
xlab("PC1- %")+
ylab("PC2- %")
#plot PCoA
ggplot(ohmer.coords, aes(MDS1, MDS2, shape=Species, color=Type))+
geom_point(size=2.8)+
#geom_text()+
theme_bw()+
guides(alpha = "none")+
xlab("PC1- %")+
ylab("PC2- %")
ohmer_pcoa<-capscale(ohmer_rare  ~ 1, distance='jaccard')
#pull out x/y coordinates
ohmer.scores<-scores(ohmer_pcoa)
#grab only sample coordinates, write to data frame
ohmer.coords<-as.data.frame(ohmer.scores$sites)
#create sample names as a column
ohmer.coords$SampleID<-row.names(ohmer.coords)
#map back meta data
ohmer.coords<-merge(ohmer.coords, meta, by.x='SampleID', by.y='SampleID')
#calculate percent variation explained for first two axis
100*round(ohmer_pcoa$CA$eig[1]/sum(ohmer_pcoa$CA$eig), 3)
#20.4
100*round(ohmer_pcoa$CA$eig[2]/sum(ohmer_pcoa$CA$eig), 3)
#plot PCoA
ggplot(ohmer.coords, aes(MDS1, MDS2, shape=Species, color=Type))+
geom_point(size=2.8)+
#geom_text()+
theme_bw()+
guides(alpha = "none")+
xlab("PC1- %")+
ylab("PC2- %")
?filterAndTrim
fnFs <- sort(list.files("./ohmer_demux/", pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files("./ohmer_demux/", pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
#look at quality of reads (change the number to see different samples)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
#assign files names
filtFs <- file.path("./ohmer_demux/", "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path("./ohmer_demux/", "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
#filter samples
filtered_out <- filterAndTrim(fnFs, filtFs,
fnRs, filtRs,
rm.phix=TRUE, minLen=120, trimRight=10, trimLeft = 20)
errF <- learnErrors(filtFs, multithread=TRUE)
#100715374 total bases in 672839 reads from 73 samples will be used for learning the error rates.
errR <- learnErrors(filtRs, multithread=TRUE)
#100288827 total bases in 672839 reads from 73 samples will be used for learning the error rates.
#optinal plot of error, uncomment
#plotErrors(errF, nominalQ=TRUE)
#do the daading for each read
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)
#merge pairs
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
#make ASV table
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
#320 27261
#remove chimeric sequences
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
#make seq tab into R table
ohmer_lab_table<-as.data.frame(seqtab.nochim)
meta<-read.delim('ohmer_lab_map.txt', header = T)
#set seed for reproducible analyses
set.seed(515)
#get sequencing depth
length(which(rowSums(ohmer_lab_table)<1000))
rowSums(ohmer_lab_table)
fnFs <- sort(list.files("./ohmer_demux/", pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files("./ohmer_demux/", pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
#look at quality of reads (change the number to see different samples)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
#assign files names
filtFs <- file.path("./ohmer_demux/", "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path("./ohmer_demux/", "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
#filter samples
filtered_out <- filterAndTrim(fnFs, filtFs,
fnRs, filtRs,
rm.phix=TRUE, minLen=100, trimRight=10, trimLeft = 15)
#learn error rates on subset of data (use default)
errF <- learnErrors(filtFs, multithread=TRUE)
#100715374 total bases in 672839 reads from 73 samples will be used for learning the error rates.
errR <- learnErrors(filtRs, multithread=TRUE)
#100288827 total bases in 672839 reads from 73 samples will be used for learning the error rates.
#optinal plot of error, uncomment
#plotErrors(errF, nominalQ=TRUE)
#do the dadaing for each read
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)
#merge pairs
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
#make ASV table
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
#320 27261
#remove chimeric sequences
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
#Identified 18 bimeras out of 2141 input sequences.
#assign taxonomy
#download from: https://zenodo.org/records/4587955
#taxa <- assignTaxonomy(seqtab.nochim, "./silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE)
#taxa2<-as.data.frame(taxa)
#make seq tab into R table
ohmer_lab_table<-as.data.frame(seqtab.nochim)
which(rowSums(ohmer_lab_table)<1000
)
ohmer_lab_table<-ohmer_lab_table[-which(rowSums(ohmer_lab_table)<1000),]
dim(ohmer_lab_table)
ohmer_rare<-rrarefy(ohmer_lab_table, sample=1000)
#calculate PCoA based on BC similarity
ohmer_pcoa<-capscale(ohmer_rare  ~ 1, distance='jaccard')
#pull out x/y coordinates
ohmer.scores<-scores(ohmer_pcoa)
#grab only sample coordinates, write to data frame
ohmer.coords<-as.data.frame(ohmer.scores$sites)
#create sample names as a column
ohmer.coords$SampleID<-row.names(ohmer.coords)
#map back meta data
ohmer.coords<-merge(ohmer.coords, meta, by.x='SampleID', by.y='SampleID')
#calculate percent variation explained for first two axis
100*round(ohmer_pcoa$CA$eig[1]/sum(ohmer_pcoa$CA$eig), 3)
#10.5
100*round(ohmer_pcoa$CA$eig[2]/sum(ohmer_pcoa$CA$eig), 3)
#plot PCoA
ggplot(ohmer.coords, aes(MDS1, MDS2, shape=Species, color=Type))+
geom_point(size=2.8)+
#geom_text()+
theme_bw()+
guides(alpha = "none")+
xlab("PC1- %")+
ylab("PC2- %")
ohmer.alph<-as.data.frame(specnumber(ohmer_rare))
ohmer.alph$SampleID<-row.names(ohmer.alph)
ohmer.alph<-merge(ohmer.alph, meta, by='SampleID')
ohmer.alpha2<-as.data.frame(vegan::diversity(ohmer_rare, index = 'shannon'))
names(ohmer.alpha2)<-"Shannon"
ohmer.alph<-cbind(ohmer.alph, ohmer.alpha2)
#plot richness and shannon
ggplot(ohmer.alph, aes(Species, Shannon, fill=Type))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
xlab("")+
coord_flip()+
ylab("Shannon Diversity")
ggplot(ohmer.alph, aes(Species, `specnumber(ohmer_rare)`, fill=Type))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
xlab("")+
coord_flip()+
ylab("Shannon Diversity")
taxa <- assignTaxonomy(seqtab.nochim, "./silva_nr99_v138.1_train_set.fa.gz", multithread=TRUE)
taxa2<-as.data.frame(taxa)
#make seq tab into R table
ohmer_lab_table<-as.data.frame(seqtab.nochim)
#write to file
write.table(ohmer_lab_table, 'asv_table.txt', quote=F, sep='\t')
write.table(taxa2, 'taxonomy.txt', quote=F, sep='\t')
unique(bd_data$Carbon_source)
